{% extends 'base.html.twig' %}
{# templates/evenement/new.html.twig #}
{% block body %}
<div class="container form-container">
    <h1>Créer un nouvel Événement</h1>
    {{ form_start(form) }}

    <div class="row">
        <div class="col-md-8"> 
            <div class="form-group row">
                <label class="col-sm-4 col-form-label text-left">{{ form_label(form.titre) }}</label>
                <div class="col-sm-8">
                    {{ form_widget(form.titre, {'attr': {'class': 'form-control'}}) }}
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-4 col-form-label text-left">{{ form_label(form.description) }}</label>
                <div class="col-sm-8">
                    {{ form_widget(form.description, {'attr': {'rows': '3', 'class': 'form-control', 'style': 'width: 100%;'}}) }}
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-4 col-form-label text-left">{{ form_label(form.date) }}</label>
                <div class="col-sm-8">
                    {{ form_widget(form.date, {'attr': {'class': 'form-control'}}) }}
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-4 col-form-label text-left">{{ form_label(form.plageHeure) }}</label>
                <div class="col-sm-8">
                    {{ form_widget(form.plageHeure, {'attr': {'class': 'form-control'}}) }}
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-4 col-form-label text-left">{{ form_label(form.lieu) }}</label>
                <div class="col-sm-8">
                    {{ form_widget(form.lieu, {'attr': {'class': 'form-control'}}) }}
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-4 col-form-label text-left">{{ form_label(form.prix) }}</label>
                <div class="col-sm-8">
                    {{ form_widget(form.prix, {'attr': {'class': 'form-control'}}) }}
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-4 col-form-label text-left">{{ form_label(form.visibleWeb) }}</label>
                <div class="col-sm-8">
                    {{ form_widget(form.visibleWeb, {'attr': {'class': 'form-check-input'}}) }}
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-4 col-form-label text-left">{{ form_label(form.user) }}</label>
                <div class="col-sm-8">
                    {{ form_widget(form.user, {'attr': {'class': 'form-control'}}) }}
                </div>
            </div>
        </div>

        <div class="col-md-4"> 
            <div class="image-container" id="image-preview">
                <img src="{{ evenement.photo1 ? asset('images/' ~ evenement.photo1) : '' }}" alt="Photo" class="img-fluid" style="height: 30vh; display: '{{ evenement.photo1 ? 'block' : 'none' }}'; margin: 0 auto;">
                {{ form_row(form.photo1) }}
            </div>
        </div>
    </div>

    <button type="submit" class="btn btn-primary">{{ button_label|default('Enregistrer') }}</button>
    {{ form_end(form) }}

    <a href="{{ path('app_evenement_index') }}" class="btn btn-secondary">Retour à la liste</a>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const imageInput = document.querySelector('#{{ form.photo1.vars.id }}');
        const imagePreview = document.querySelector('#image-preview img');
        const saveButton = document.querySelector('.btn-primary');
        const backToListButton = document.querySelector('.btn-secondary');
        const formElements = document.querySelectorAll('input[type="text"], textarea');

        if (imageInput) {
            imageInput.addEventListener('change', function (event) {
                if (event.target.files && event.target.files[0]) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        imagePreview.src = e.target.result;
                        imagePreview.style.display = 'block';
                    };
                    reader.readAsDataURL(event.target.files[0]);
                } else {
                    imagePreview.style.display = 'none';
                }
            });
        }

        let formChanged = false;

        formElements.forEach(element => {
            element.addEventListener('input', () => {
                formChanged = true;
                saveButton.disabled = false;
                backToListButton.disabled = false;
            });
        });

        saveButton.addEventListener('click', (event) => {
            formChanged = false;
        });

        backToListButton.addEventListener('click', (event) => {
            if (formChanged) {
                event.preventDefault();
                if (confirm('Vous avez des modifications non sauvegardées. Êtes-vous sûr de vouloir quitter?')) {
                    window.location.href = backToListButton.href;
                }
            }
        });
    });
</script>
{% endblock %}
